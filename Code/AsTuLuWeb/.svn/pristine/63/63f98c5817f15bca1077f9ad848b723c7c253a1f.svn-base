using System.Linq;
using AsTuLuWebProject.Database;
using AsTuLuWebProject.Models;
using AsTuLuWebProject.Models.Interfaces;
using AsTuLuWebProject.Models.Interfaces.DAL;
using LinqToExcel;
using System.IO;
using System.Web;
using System.Web.Mvc;

namespace AsTuLuWebProject.Controllers
{
    public class DataController : Controller
    {
        private readonly IBookRepository BookRepository;
        private readonly IEditorRepository EditorRepository;
        private readonly ICategoryRepository CategoryRepository;

        public enum Language
        {
            French,
            English
        }

        public DataController()
        {
            AsTuLusEntities context = new AsTuLusEntities();

            BookRepository = new BookRepository(context);

            EditorRepository = new EditorRepository(context);

            CategoryRepository = new CategoryRepository(context);
        }

        [HttpGet]
        public ActionResult WriteScripts()
        {
            return View();
        }

        [HttpPost]
        public ActionResult WriteScripts(string submitButton)
        {
            switch (submitButton)
            {
                case "Categories":
                    break;
                case "Books":
                    break;
                case "Editors":
                    break;
            }

            return View();
        }

        [HttpGet]
        public ActionResult ReadExcelFile() 
        {
            return View();
        }

        [HttpPost]
        public ActionResult ReadExcelFile(HttpPostedFileBase file2)
        {
            HttpPostedFileBase file = Request.Files[0];
            
            if (file != null && file.ContentLength > 0)
            {
                // extract only the filename
                var fileName = Path.GetFileName(file.FileName).Replace(" ", "").Replace("-", "");

                var path = Server.MapPath("~/ExcelFiles/Uploads");

                Directory.CreateDirectory(path);

                path = Path.Combine(Server.MapPath("~/ExcelFiles/Uploads"), fileName);

                file.SaveAs(path);

                ExcelQueryFactory excel = new ExcelQueryFactory(path);

                excel.AddMapping<BookModel>(_x => _x.BookName, "Titre");
                excel.AddMapping<BookModel>(_x => _x.Author1, "Auteur1");
                excel.AddMapping<BookModel>(_x => _x.Author2, "Auteur2");
                excel.AddMapping<BookModel>(_x => _x.Author3, "Auteur3");
                excel.AddMapping<BookModel>(_x => _x.ISBN, "ISBN");
                excel.AddMapping<BookModel>(_x => _x.CollectionTag, "Collection");
                excel.AddMapping<BookModel>(_x => _x.SerieTag, "Série");
                excel.AddMapping<BookModel>(_x => _x.CollectionTag, "Collection");
                excel.AddMapping<BookModel>(_x => _x.Number, "Numéro livre");
                excel.AddMapping<BookModel>(_x => _x.EditorName, "Éditeur");
                excel.AddMapping<BookModel>(_x => _x.Language, "Langage");
                excel.AddMapping<BookModel>(_x => _x.CategoryName, "Catégorie");
                excel.AddMapping<BookModel>(_x => _x.SubCategoryName, "Sous-catégorie");
                excel.AddMapping<BookModel>(_x => _x.Translated, "Traduit");
                excel.AddMapping<BookModel>(_x => _x.Year, "Année de parution");
                excel.AddMapping<BookModel>(_x => _x.PageNumber, "Nombre page");
                
                var books = from x in excel.Worksheet<BookModel>("Inventaire")
                            select x;

                int itemCount = books.Count();

                int itemAdded = 0;

                foreach (BookModel book in books)
                {
                    bool alreadyCreated = BookRepository.CheckIfBookPresent(book);
                    
                    if (!alreadyCreated)
                    {
                        BookRepository.AddBook(book);
                        BookRepository.Save();
                        itemAdded++;
                    }
                }

                if (itemAdded != itemCount)
                {
                    ModelState.AddModelError("", "There were " + (itemCount - itemAdded) + " items already presents in the database.");
                }
                else
                {
                    ModelState.AddModelError("", "Operation successful.");
                }
            }

            return View();
        }
    }
}
