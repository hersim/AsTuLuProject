using System;
using System.Collections.Generic;
using System.Data.Entity.Validation;
using System.Diagnostics;
using System.Linq;
using AsTuLuWebProject.Database;

namespace AsTuLuWebProject.Models.Interfaces.DAL
{
    public class CategoryRepository : ICategoryRepository
    {
        public List<Category> ListCategories()
        {
            using (AsTuLusEntities context = new AsTuLusEntities())
            {
                return context.Category.ToList();    
            }
            
        }

        public List<CategoryModel> ListCategoriesByBookID(int bookId)
        {
            using (AsTuLusEntities context = new AsTuLusEntities())
            {
                List<CategoryModel> listToReturn = new List<CategoryModel>();

                var catQry = from cat in context.BookByCategory
                             where cat.BookID == bookId
                             select cat;

                if (catQry.Any())
                {
                    foreach (BookByCategory bookByCategory in catQry)
                    {
                        bookByCategory.Category.TimesCategoryConsulted++;

                        listToReturn.Add(new CategoryModel
                        {
                            CategoryId = bookByCategory.Category.CategoryID,
                            CategoryName = bookByCategory.Category.CategoryName,
                            DateAdded = bookByCategory.Category.DateAdded,
                            TimesCategoryConsulted = bookByCategory.Category.TimesCategoryConsulted
                        });
                    }

                    context.SaveChanges();
                }

                return listToReturn;
            }
            
        }

        public Category GetCategoryByID(int categoryID)
        {
            using (AsTuLusEntities context = new AsTuLusEntities())
            {
                return context.Category.Find(categoryID);    
            }
        }

        public Category GetCategoryByNameAndSubtype(string categoryName, string subType)
        {
            using (AsTuLusEntities context = new AsTuLusEntities())
            {
                List<Category> Category = context.Category.Where(item => item.CategoryName == categoryName).ToList();

                if (Category.Count == 0)
                {
                    return null;
                }

                return !String.IsNullOrWhiteSpace(subType) ? Category.First() : Category.FirstOrDefault(item => item.CategoryName == categoryName);
            }
            
        }

        public void AddCategory(Category category)
        {
            context.Category.Add(category);

            context.Entry(category).State = System.Data.Entity.EntityState.Added;
        }

        public void DeleteCategory(int categoryID)
        {
            Category categoryToDelete = context.Category.Find(categoryID);

            context.Category.Remove(categoryToDelete);

            context.Entry(categoryToDelete).State = System.Data.Entity.EntityState.Deleted;
        }

        public void UpdateCategory(Category category)
        {
            context.Entry(category).State = System.Data.Entity.EntityState.Modified;
        }

        public void Save()
        {
            try
            {
                context.SaveChanges();
            }
            catch (DbEntityValidationException dbEx)
            {
                foreach (var dbValidationError in dbEx.EntityValidationErrors.
                    SelectMany(dbEntityValidationResult => dbEntityValidationResult.ValidationErrors))
                {
                    Trace.TraceInformation("Property: {0} Error: {1}", dbValidationError.PropertyName, dbValidationError.ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!this.Disposed)
            {
                if (disposing)
                {
                    context.Dispose();
                }
            }
            this.Disposed = true;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
    }
}